OS : 한정된 메모리나 시스템 자원을 효율적으로 분배, 이와 유사하나 소프트웨어 추가설치 불가한 것을 펌웨어라고 한다
운영체제 역할 : CPU스케줄링과 프로세스 관리, 메모리관리, 파일 디스크 관리, I/O 디바이스 관리
운영체제 구조 : 유저 프로그램 - 인터페이스(GUI,CUI) - 시스템콜 - 커널<<드라이버,파일시스템>>> - 하드웨어
... 프로그램과 하드웨어 사이에 존재

드라이버 : 하드웨어의 제어를 위한 소프트웨어
시스템콜 : 운영체제가 커널에 접근하기 위한 인터페이스, 유저 프로그램이 운영체제의 서비스 받기 위해 커널함수 호출시 사용,
... 유저 프로그램의 I/O요청으로 트랩 발동 -> 올바른 I/O요청인지 확인 -> 유저모드가 시스템콜을 통해 커널모드로 변환되어 실행
I/O 요청 : 입출력 함수, 데이터베이스, 네트워크, 파일 접근 등에 관련된 일

시스템콜 : 메모리상의 프로세스나 스레드의 요청 -> 시스템콜 -> 커널 -> OS
... 하나의 추상화 계층이며 네트워크 통신이나 데이터베이스와 같은 낮은 단계의 영역처리에 대한 많은 부분을 신경안쓰고 프로그램 구현 가능

modebit : 시스템콜 작동시 modebit 참고해서 유저모드와 커널모드를 구분, 1또는 0값을 가지는 플레그 변수
... 프로그램의 카마라 이용 요청 -> 시스템콜 호출 -> 커널모드에서 카메라 자원 이용한 로직 수행 -> 이후 로직 실행
... 여기서 커널 모드에서 modebit를 커널모드인 0으로 변경했다가 이후 로직 실행시 유저 모드인 1로 변경
... 이를 통해 악의적 공격자의 공격 예방
유저모드 : 유저의 접근권한을 제한해 컴퓨터 자원에 함부로 침범 못하게 막는다
커널모드 : 모든 컴퓨터 자원에 접근 가능한 모드
커널 : 운영체제의 핵싱이자 시스템콜 인터페이스 제공하며 보안,메모리,프로세스,파일 시스템,I/O 디바이스, I/O요청관리 등의 운영체제의 중추적 역할

CPU : 산술논리연산장치,제어장치,레지스터로 구성된 컴퓨터 장치, 인터럽트에 의해 단순히 메로리에 존재하는 명령어를 해석해서 실행
... 운영체제의 커널이 프로그램을 메모리에 올려 프로세스로 올리면 이를 CPU가 처리
제어장치 : CPU의 CU(컨트롤유닛), 입출력 장치간 통신을 제어하고 명령어들을 읽고 해석하고 데이터 처리를 위한 순서 결정
레지스터 : CPU 내부의 매우 빠른 임시기억장치, CPU와 직접 연결로 연산속도가 메모리보다 빠르다, CPU는 레지스터를 거쳐 데이터를 임시저장하고 내보낸다
산술논리연산장치(ALU) : 산술연산과 논리연산 수행하는 디지털 회로

CPU연산 처리 : 제어장치가 메모리와 레지스테이 계산할 값을 로드 -> 제어장치가 레지스터에 있는 값을 계산하라고 산술논리연산장치에 명령 ->
... 제어장치가 계산된 값을 다시 레지스터에서 메로리로 계산된 값을 저장

인터럽트 : CPU를 정지시키는 것, I/O 디바이스에 의한 인터럽트나 0으로 숫자나누는 산술연산에서의 인터럽트나 프로세스 오류 등으로 발생
... 인터럽트 발생시 인터럽트 핸들러 함수가 모인 인터럽트 백터로 이동해 인터럽트 핸들러 함수가 실행, 인터럽트간에 우선순위가 존재하고
... 우선순위에 따라 실행되며 인터럽트는 하드웨어인터럽트와 소프트웨어인터럽트로 나뉜다
인터럽트 핸들러 함수 : 인터럽트 발생시 이를 핸들링하기 위한 함수, 커널 내부의 IRQ통해 호출되며 request_irq()통해 인터럽트 함수를 등록 가능

하드웨어 인터럽트 : I/O 디바이스에 의해 발생, 인터럽트 라인 설계된 이후 순차적인 인터럽트 실행을 중지하고 운영체제에 시스템콜을 요청해
... 원하는 디바이스로 향해 디바이스에 있는 작은 로컬 버퍼에 접근하여 일을 수행
소프트웨어 인터럽트 : 소프트웨어 인터럽트는 트랩이라고 하며 프로세스 오류 등으로 프로세스가 시스템콜을 호출시 발동

DMA 컨트롤러 : I/O 디바이스가 메모리에 직접 접근할 수 있도록 하는 하드웨어 장치, cpu의 부하를 막는다
메모리 : 전자회로의 데이터나 상태나 명령어 등을 기록하는 장치
타이머 : 작업의 마감기한을 정하고 특정 프로그램에 시간제한은 다는 역할
디바이스 컨트롤러 : 컴퓨터와 연결되어 있는 I/O디바이스들의 작은 CPU를 의미, 옆에 붙은 로컬 버퍼는 각 디바이스에서 데이터를 임시로 저장위한 작은 메모리

메모리 계층 : 레지스트 - 캐시(L1,L2캐시) - 메모리(RAM)/주기억장치 - 저장장치(HDD,SSD)/보조기억장치
레지스터 : CPU 내부의 작은 메모리,휘발성과 속도가 빠르고 용량이 적다
캐시 : 휘발성,빠른속도,적은기억용량
주기억장치 : RAM이 이에 해당, 휘발성,보통속도,기억용량보통
보조기억장지 : HDD,SDD가 이에 해당, 비휘발성,낮은속도,많은기억용량

캐시 : 임시저장소, 속도다른 장치간 병목현상을 줄인다, 계층한 속도차이 줄이기 위한 계층을 캐시계층
시간지역성 : 최근 데이터에 다시 접근하려는 특성
공간지역성 : 최근 근접한 데이터를 이루는 공간이나 가까운 공간에 접근하는 특성
캐시히트 : 캐시에서 원하는 데이터를 찾는 경우
캐시미스 : 해당 데이터가 캐시에 없을 경우 주 메모리에서 데이터를 찾는 경우
캐시매핑 : 캐시가 히트되기 위해 매핑하는 방법, cpu와 주 메모리간 데이터 교류시를 기반으로 설명
직접매핑 : 메모리보다 상대적으로 양이 적은 캐시 데이터를 각각을 메모리의 데이터와 직접 매핑하는 방식, 처리가 빠르나 잦은 충돌
연관매핑 : 순서를 일치시키지 않고 관련 있는 캐시와 메모리를 매핑, 충돌 적으나 모든 블록 탐색이 필요해 속도가 느리다
집합 연관 매핑 : 직접매핑과 연관매핑을 합침, 순서는 일치시키나 집합을 둬서 저장하고 블록화로 검색이 효율적

웹브라우저의 캐시 : 쿠키,로컬스토리지,세션스토리지, 사용자의 커스텀 정보나 인증 모듈 관련 사항을 웹브라우저에 저장해 추후 서버요청시 중복요청을 방지,
... 오리진에 종속
쿠키 : 만료기한이 있는 키-값 저장소, 4KB까지 저장,만료기한 설정가능하나 보통 서버에서 만료기한을 지정
로컬 스토리지 : 만료기한 없는 키-값 저장소, 5MB까지 저장, 웹브라우저 닫아도유지, HTML5미지원 웹브라우저 사용불가, 클라이언트에서만 수정가능
세션 스토리지 : 만료기한 없는 키-값 저장소, 탭단위 세션스토리지 생성되며 탭종료시 데이터삭제, 최대5MB까지, HTML5미지원 웹브라우저 사용불가
... 클라이언트에서 수정가능
redis : 데이터베이스 시스템 구축시 메인 데이터베이스 위에 캐싱계층으로 두어 성능향상

가상메모리 : 컴퓨터의 가용가능한 메모리자원을 추상화, 추상화된 메모리자원은 가상주소가 부여되고 메모리관리장치에 의해 실제주소로 변환,
사용자는 기존 메모리 용량보다 더 큰 메모리 용량을 다룰수 있다
TLB : 메모리와 cpu사이의 주소 변환 위한 캐시, 페이지 테이블에 있는 리스트를 보관하고 cpu가 페이지테이블까지 않가게 해주는 캐시계층
스와핑 : 가상매모리에 존재하나 실체 메모리에 없는 데이터에 접근시 페이지 폴트가 발생하며, 이때 메모리의 미사용 영역을 하드디스크로 옮기고
... 하드디스크의 일부분을 메모리처럼 불러와 사용하는 것
페이지 : 가상 메모리 사용하는 최소 크기 단위
프레임 : 실제 메모리 사용하는 최소 크기 단위
스레싱 : 메모리의 페이지 폴튜율이 높은 것을 의미, 페이지 폴트시 cpu이용률이 낮아지고 cpu는 가용성 위해 더많은 프로세스를 메모리에 올려
... 이 과정의 반복으로 스레싱이 발생
작업세트 : 프로세스의 과거 사용 이력인 직역성을 통해 결정된 페이지 집합을 만들어서 미리 메모리에 로드
PFF : 페이지 폴드 빈도를 조절하는 방법, 상한선과 하한선을 만든다, 상한선 도달지 프레임 늘리고 하한선 도달시 프레임 줄인다
메모리 할당 : 메모리에 프로그램 할당시 시작메모리위치,메모리의할당 크기 기반으로 할당

연속할당 : 프로세스들을 순차적으로 공간에 할당, 고정분할방식과 가변분할 방식이 존재

고정분할 방식 : 메모리를 미리 나누어 관리, 융통성이 없어 내부 단편화 발생
가변 분할 방식 : 매 시점 프로그램 크기에 맞게 메모리를 나줘 사용, 내부단편화 없고 외부 단편화 발생 가능
..... 최소적합 : 위쪽 또는 아래쪽부터 시작해 홀 찾을시 바로 할당
..... 최적적합 : 프로세스의 크기 이상인 공간중 가작 적은 홀부터 할당
..... 최악적합 : 프로세스의 크기와 가장 차이가 많이 나는 홀에 할당
내부단편화 : 메모리를 나눈 크기보다 프로그램이 작아 남는 공간이 많이 발생
외부단편화 : 메모리를 나눈 크기보다 프로그램이 커서 들어가지 못하는 공간이 많이 발생
홀 : 할당 가능한 비어있는 메모리 공간

불연속 할당 : 현대 운영체제가 사용하는 방법, 메모리를 동일 크기의 페이지(보통4KB)로 나누고 프로그램마다
... 페이지 테이블 두어 이를 통해 메모리에 프로그램을 할당,페이징.세그멘테이션.페이지세그멘테이션이 이에 해당
페이징 : 동일 크기의 페이지 단위로 나누어 메모리의 서로다른 위치에 프로세스를 할당, 홀의 크기가 비균일한 문제 없지만 주소변환복잡
세그멘테이션 : 세그먼트 단위로 나누는 방식, 공유와 보안에서 장점을 가짐, 홀크기가 비균일
페이지 세그멘테이션 : 프로그램을 의미 단위인 세그먼트로 나누어 공유.보안에 장점가지고, 임의길이가 아닌 동일 크기의 페이지 단위로 나눈다

오프라인 알고리즘 : 미래에 참조되는 페이지와 현재 할당하는 페이지를 바꾸는 알고리즘, 사용불가한 알고리즘으로 다른 알고리즘과 성는 비교에 대한 상한기준 제공
FIFO : 먼저온 페이지를 교체 영역에 가장 먼저 놓는 방법
LRU : 참조가 가장 오래된 페이지를 바꾼다, 오래된 페이지 파악을 위해 각 페이지마다 계수기 스택을 두어야 하는 문제점이 있다
NUR : LRU에서 발전된 알고리즘, 시계 알고리즘이라 하고 1과 0으로 최근 참조된 프로세스인지 구분하고 계속 돌며 0으로 표시된 해당프로세스를 교체하는 방식
LFU : 가장 참조횟수 적은 페이지를 교체

프로세스 : 컴퓨터에서 실행되는 프로그램, cpu스케줄링 대상이 되는 테스크와 거의 같은 의미,스레드는 프로세스 내 작업의 흐름을 지칭,
... 프로그램이 메모리에 올라가면 프로세스가 되는 인스턴스화가 일어나고 이후 운영체제의 cpu스케줄러에 따라 cpu가 프로세스를 실행
컴파일 과정 : 소스코드파일 -> 전처리 -> 컴파일러 -> 어셈블리어 -> 목적코드 -> 링커(이때라이브러리도불러온다) -> 실행가능파일
전처리 : 소스코드의 주석을 제거하고 헤더파일을 병합하여 메크로를 치환
컴파일러 : 오류처리, 코드 최적화 작업을 하고 어셈블리어로 변환
어셈블러 : 어셈블리어는 목적코드로 변환, 리눅스에서의 확장자는 .o이다
링커 : 프로그램 내의 라이브러리 함수 또는 다른 파일들과 목적 코드를 결합해 실행 파일을 생성, 확장자는 .exe 나 .out

정적 라이브러리 : 프로그램 빌드시 라이브러리가 제공하는 모든 코드를 실행 파일에 넣는 방식, 외부의존도 낮으나 코드중복발생
동적 라이브러리 : 프로그램 실행시 필요할 때만 DLL함수 정보 통해 참조하여 라이브러리를 사용하는 방법, 메모리효율,외부의존도 높아

프로세스 흐름 : 생성 -> (대기-중단-일시중단-대기중단) <- -> 실행 -> 종료
생성상태 : fork() or exec()함수 통해 생성 이때 PCB가 할당
fork() : 부모 프로세스의 주소 공간을 그대로 복사에 새로운 자식 프로세스를 생성하는 함수, 주소 공간만 복사하며 부모 프로세스의 비동기 작업은 상속안함
exec() : 새롭게 프로세스를 생성하는 함수
대기상태 : 메모리 공간이 충분시 메모리 할당받거나 미할당 상태로 대기, cpu스케줄러부터 cpu소유권이 넘어오길 기다린다
대기중단상태 : 메모리 부족으로 일시 중단상태
실행상태 : cpu소유권과 메모리를 할당받고 인스트럭션을 수행중인 상태
중단상태 : 어떤 이벤트 발생후 프로세스가 차단된 상태
일시중단상태 : 대기중단과 유사, 중단상태에서 프로세스가 실행되려 했으나 메모리 부족으로 일시 중단된 상태
종료상태 : cpu소유권을 놓고가는 생태, 부모프로세스가 자식 강제종료 시키는 비자발적 종료도 이에 포함

프로세스 메모리의 구조 : 동적영역(스택.힙), 정적영역(데이터영역.코드영역)
스택과 힙 : 런타임 단계에서 메모리 할당받는 동정할당이 된다
스택 : 지역변수, 매개변수, 실행함수에 의해 늘고줄어드는 메모리 영역이고 함수 호출시 환경 등 특정 정보가 스택에 저장
... 재귀함수 호출시 새로운 스택 프레임이 매번 사용되어 함수 내의 변수 집합이 해당 함수의 다른 인스턴스 변수를 방해하지 않는다
힙 : 동적으로 할당되는 변수들을 담는다, malloc().free()함수통해 관리, 동적으로 관리되는 자료구조는 힙영역 사용

정적할당 : 컴파일 단계에서 메모리를 할당하는 방식, 데이터 영역은 BBS세그먼트와 Data세그먼트/text세그먼트로 나뉘어 저장
BSS세그먼트 : 전역 변수나 static,const로 선언되며 0으로 초기화 또는 초기화가 어떠한 값으로도 되어있지않은 변수들이 이 메모리 영역에 할당
data세그먼트 : 전역변수 또는 static,const로 선언되어 있고 0이 아닌 값으로 초기화된 변수가 메모리 영역에 할당

PCB : 운영체제에서 프로세스에 대한 메타데이터를 저장한 데이터를 의미, 프로세스 제어 블록이라고도 함, 프로세스 셍성시 운영체제는 해당 PCB를 생성
... 프로그램 실행시 프로세스가 생성되고 프로세스 주소 값들에 스택.힙 등의 구조를 기반으로 메모리가 할당되며 이 프로스세의 메타 데이터가 PCB에 저장되어
... 관리, 일반 사용자가 접근 못하도록 커널 스택의 가장 앞부분에서 관리된다
메타데이터 : 데이터에 관한 구조화된 데이터이자 데이터를 설명하는 작은 데이터, 대량의 정보중 가온데에서 찾는 정보를 효율적으로 잦아내서 이용하기
... 위해 일정규칙따라 콘텐츠에 부여되는 데이터

PCB의 구조 -
프로세스 스캐줄링 상태 : 준비,일시중단 등 프로세스가 cpu에 대한 소유권 얻은 이후의 상태
프로세스 ID : 프로세스ID, 해당 프로세스의 자식 프로세스 ID
프로세스 권한 : 컴퓨터 자원 또는 I/O디바이스에 대한 권한 정보
프로그램 카운터 : 프로세스에서 실행해야 할 다음 명령어의 주소에 대한 포인터
cpu레지스터 : 프로세스 실행 위해 저장해야 할 레지스터에 대한정보
cpu스케줄링 정보 : cpu스케줄러에 의해 중단된 시간 등에 대한 정보
계정 정보 : 프로세스 실행에 사용된 cpu의 사용량, 실행한 유저의 정보
i/o 상태 정보 : 프로세스에 할당된 i/o디바이스 목록

컨택스트 스위칭 : PCB기반으로 프로세스의 상태를 저장하고 로드시키는 과정, 한 프로세스에 할당된 시간이 끝나거나 인터럽트에 의해 발생,
... 컴퓨터는 어떠한 시점이던지 실행하는 프로세스는 단 한개이며 많은 프로세스가 동시에 구동되는 것처럼 보이는건 다른 프로세스와 컨텍스트 스위칭이
... 매우 빠르게 일어나기 때문, 이는 싱글코어를 기준점으로 잡은 설명이며 현대의 cpu는 멀티코어 임으로 이 설명은 미적용된다
스레드의 컨텍스트 스위칭 : 스레드는 스택 영역을 제외한 모든 메모리 영역을 공유함으로 스레드의 컨텍스트 스위칭은 적은비용과 적은 시간 소요

멀티프로세싱 : 하나의 일을 병렬로 처리하거나, 프로세스중 일부 문제 발생시 다른 프로세스 이용에 처리가능해서 신뢰성 높다
브라우저 프로세스 : 주소표시줄, 북마크막대, 뒤로가기버튼 등을 담당하고 네트워크 요청이나 파일 접근 같은 권한 담당
렌더러 프로세스 : 웹 사이트가 보이는 부분의 모든것을 제어
플러그인 프로세스 : 웹 사이트에서 사용하는 플러그인을 제어
gpu 프로세스 : gpu를 이용해 화면에 그리는 부분을 제어

IPC : 프로세스끼리의 데이터를 주고받고 공유 데이터를 관리하는 메커니즘,예시는 클라이언트-서버,
... 종류는 공유메모리,파일,소켓,익명파이프,명명파이프,메시지큐 등이 있고 이들은 메모리가 완전히 공유되는 스레드보단 속도가 떨어진다
공유메모리 : 여러 프로세스에 동일한 메모리 블록에 대한 접근권한을 부여해 프로스세간 통신이 가능하도록 공유 메모리를 생성,
불필요한 데이터복사 오버헤드가 발생하지 않아 가장 빠그고 같은 메모리영역을 여러 프로세스가 공유함으로 동기화가 필요
파일 : 디스크에 저장된 데이터 또는 파일 서버에서 제공한 데이터,이를 기반으로 프로세스간 통신을 한다
소켓 : 동일한 컴퓨터의 다른프로세스나 네트워크의 다른 컴퓨터로 네트워크 인터페이스를 통해 전송하는 데이터를 의미, TCP UDP가 이에 해당
익명 파이프 : 프로세스간 FIFO방식으로 읽히는 임시 공간인 파이프를 기반으로 데잍를 주고받으며, 단방향 방식의 읽기 전용.쓰기전용 파이프를 만들어 작동하는 방식
... 부모 자식간 프로세스에서 사용가능하고 네트워크에서 사용불가
먕명된 파이프 : 파이프서버와 하나 이상의 파이프클라이언트 간의 통신을 위한 명명된 단방향.양방향 파이프를 지칭,
... 클라이언트/서버 간 통신 위한 별도 파이프를 제공, 여러 파이프를 동시에 사용가능, 컴퓨터의 프로세스끼리나 다른 네트워크상 컴퓨터와 통신가능
메시지 큐 : 메시지를 큐 데이터 구조 형태로 관리, 커널의 전역변수 형태 등 커널에서 전역적으로 관리되며 다른IPC방식에 비해 사용법이 직관적이고,
... 다른 코드의 수정 없이 적은수의 코드추가로 간단히 메시지 큐에 접근 가능, 공유메모리 통해 IPC구현시 쓰기 및 읽기 빈도가 높으면 동기화 때문에
... 기능 구현이 어렵지만 이때의 대안으로 메세지큐를 사용

스레드 : 프로세스의 실행 가능한 가장작은 단위, 한 프로세스는 여러 스레드를 가질 수 있다, 코드.데이터.스택.힙을 각각 생성하는 프로세스와 달리 스레드는
... 코드,데이터,힙은 스레드끼리 공유한다
멀티스레딩 : 프로세스 내 작업을 여러개의 스레드.멀티스레드로 처리, 스레드끼리의 자원공유로 높은 효율, 한스레드의 문제발생시 다른스레드에 영향 준다
동시성 : 서로 독립적인 작업들을 작은 단위로 나누고 동시에 실행되는 것처럼 보여주는것

공유자원 : 시스템내의 각 프로세스.스레드가 함께 접근가능한 모니터.파일 등의 자원이나 변수를 의미, 공유자원을 두개 이상의프로세스가
... 동시 접근하는 상태를 경쟁상태라고 한다
임계영역 : 둘 이상의 프로세스.스레드가 고유 자원에 접근시 순서 등의 이유로 결과가 달라지는 코드 영역, 해결방법은 뮤택스.세마포어.모니터 등으로
... 이 방법들은 상호배제.한정대기.융통성이란 조건을 만족한다, 이 방법의 핵심 메커니즘은 잠금이다
상호배제 : 한 프로세스가 임계영역에 들어갈시 다른 프로세스는 들어갈 수 없다
한정대기 : 특정 프로세스가 영원히 임계 영역에 들어가지 못하면 안된다
융통성 : 어떠한 프로세스도 임계영역을 사용하지 않는다면 임계 영역 외부의 어떠한 프로세스도 들어갈 수 있으며 이때 프로세스끼리 서로 방해하지 않는다

뮤텍스 : 프로세스나 스레드가 공유자원을 lock()통해 잠그고 사용후 unlock()통해 잠금해제하는 객체, 잠금설정시 다른 프로세스나 스레드는
... 잠긴 코드 영역에 접근 불가, 뮤텍스는 잠금 또는 잠금해제라는 상태만 가진다
세마포어 : 일반화된 뮤텍스, 정수값과 두가지 함수wait().signal()로 공유자원에 대한 접근처리
... wait()는 자신의차례가 오기까지 기다리는 함수, signal()다음 프로세스로 순서 넘겨주는 함수
바이너리 세마포어 : 0또는1값만 가지는 세마포어이다, 뮤텍스는 잠금메커니즘이고 세마포어는 신호기반으로 상호배제 일어나는 신호 메커니즘이다
카운팅 세마포어 : 카운팅 세마포어는 여러 개의 값을 가질 수 있는 세마포어이고 여러 자원에 대한 접근을 제어시 사용
모니터 : 둘 이상의 스레드나 프로세스가 공유 자원에 안전 접근 가능하도록 공유 자원을 숨기고 해당 접근에 대해 인터페이스만 제공

교착상태 : 두개 이상의 프로세스들이 서로가 가진 자원 기다리며 중단된 상태
교착상태 원인 -
상호배제 : 한 프로세스가 자원을 독점하여 다른 프로세스들의 접근이 불가능
점유대기 : 특정 프로세스가 점유한 자원을 다른 프로세스가 요청한 상태
비선점 : 다른 프로세스의 자원을 강제적으로 가져올 수 없다
환형대기 : 서로가 서로의 자원을 요구하는 상태
교착상태 해결 -
... 자원 할당시 교착상태 조건 성립이 안되도록 설계, 교착상태 가능성 없을시에만 자원 할당하고 프로세스당 요청할 자원의 최대치를 통해
... 할당 가능 여부를 파악하는 은행원 알고리즘 사용, 교착상태 발생시 사이클을 찾고 이에 관련된 프로세스를 한개씩 지운다
... 교착상태는 매우 드물게 일어나기 때문에 이를 처리하는 비용이 큼으로 교착상태 발생시 사용자가 작업을 종료한다. 이방법은 현대에서 사용
은행원 알고리즘 : 총 자원의 양과 현재 할당한 자원의 양을 기준으로 인정 또는 불안정 상태로 나누고 안정 상태로 가도록 자원을 할당하는 알고리즘

cpu 스케줄링 알고리즘 : 선점형(라운드로빈,SRF,다단계큐), 비선점형(우선순위,FCFS,SJF)
... 프로그램 실행시 스케줄링 알고리즘이 어떤 프로그램에 자원할당할지 결정, cpu이용률 높이고 주어진시간에 많은 일을 하게,
... 준비큐에 있는 프로세스는 적게, 응답시간을 짧게 가져가는 것이 목표

비선점형 방식 : 프로세스가 스스로 cpu소유권을 포기하는 방식, 컨텍스트 스위칭으로인한 부하가 적다
FCFS : 가장 먼저 온것을 가장 먼저 처리하는 알고리즘, 길게 수행되는 프로세스에 의해 준비큐에서 오래기다리는 현상 발생 가능하다는 단점
SJF : 실행시간이 가장 짧은 프로세스를 가장 먼저 실행하는알고리즘, 긴 시간을 가진 프로세스가 실행되지 않는 현상이 발생되며 평균 대기시간이 가장 짧다,
... 실제론 실행시간 알 수 없어서 과거의 실행시간 토대로 추축해서 사용
우선순위 : SJF의 긴 스케줄링 가지는 프로세스가 실행되지 않는 단점을 오래된 작업일수록 우선순위 높이는 방식으로 보완한 알고리즘

선점형 방식 : 현대 운영체제가 사용하는 방식, 현재 사용하는 프로세스를 알고리즘에 의해 중단시키고 강제로 다른 프로세스에 cpu에 대한 소유권을 할당하는 방식
라운드 로빈 : 각 프로세스당 동일한 할당시간 부여하고 그시간 내에 미종료시 준비큐의 뒤로가는 알고리즘, 할당시간이 너무 클경우 FCFS가되고, 짤으면
... 컨텍스트 스위칭이 잦아져 오버헤드가 발생, 일반적으로 전체 작업시간이 길어지나 평균 응답시간은 짧어진다, 로드밸런서의 트래픽 분산 알고리즘으로도 사용
SRF : 중간에 더 짧은 작업이 들어오면 수행하던 프로세스를 중지하고 해당프로세스를 실행하는 알고리즘
다단계큐 : 우선순위에 따른 준비 큐를 여러개 사용하고 각 큐마다 라운드 로빈이나 FCFS등의 다른 스케줄링 알고리즘을 적용한 것,
... 큐간 프로세스 이동불가로 스케줄링 부담이 적으나 유연성이 떨어진다


















