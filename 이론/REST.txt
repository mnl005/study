REST(Representational State Transfer, 자원의 상태 전달)


- 네트워크 아키텍처 원리 -

1. 클라이언트와 서버는 독립적으로 분리되어 있어야 한당
2. Stateless : 요청에 대해서 클라이언트의 상태가 서버에 저장을 하지 않는다
3. 클라이언트는 서버의 응답을 캐시할 수 있어야 한다. 클라이언트가 캐시를 통해서 응답을 재사용 가능해야 하고,
이를 통해 서버 부하를 낮춘다
4. 계층화(Layered System) : 서버와 클라이언트 사이에 방화벽, 게이트웨이, 프록시 등의 다계층 형태를
구성할 수 있어야하며 확장가능해야 한다
5. 인터페이스 일관성 : 아키텍처를 단순화시키고 작은 단위로 분리하여서 클라이언트와 서버가 독립적으로 계선 가능해야 한다
6. Code On Demand(optional) : 자바 애플릿, 자바스크립트 플래시 등 특정 기능을 서버가 클라이언트에
코드를 전달하여 실행 할 수 있어야 한다


- 인터페이스 일관성 -

1. 자원식별
2. 메시지를 통한 리소스 조작
3. 자기 서술적 메시지
4. 애플리케이션에 상태에 대한 엔진으로서 하이퍼미디어


- 자원식별 -

웹기반 REST에서 리소스 접근을 URI를 사용
https://qwer.co.kr/user/100
리소스 : user
식별자 : 100


- 메시지를 통한 리소스 조작 -

리소스의 타입을 알려주기 위해 header 부분에 content-type를 통해 어떠한 타입인지 지정 가능


- 자기서술적 메시지 -

요청하는 데이터의 처리방법에 대한 데이터를 포함할 수 있어야 한다
HTTP 기반의 REST에서 HTTP Method와 Header의 정보로 이를 표현 가능


- 애플리케이션 상태에 대한 엔진으로서 하이퍼미디어 -

REST API를 개발시 클라이언트 요청에 대한 데이터만 내리는게 아닌 관련 리소스에 대한 Link 정보도 포함되어야 한다
이러한 조건을 잘 갖춘 경우를 REST Full 하다 하고 이를 REST API라고 부른다


- URI 설계 -

1. URI(Uniform Resource Identifier) : 인터넷에서 특정 자원을 나타내는 주소값이고 유일값이다
2. URL(Uniform Resource Locator) : 인터넷 상의 자원,특정 파일의 위치를 식별하는 주소
3. URL은 URI의 하위 개념이다


- URI 설계원칙 (RFC-3986) -

1. 슬래시 구분자 (/)는 계층관계를 나타내는데 사용
2. URI 마지막 문자로 (/)는 포함하지 않는다
3. 하이픈(-)은 URI 가독성을 높이는데 사용
4. 밑줄(_)은 사용하지 않는다
5. URI 경로에는 소문자가 적합하다
6. 파일 확작자는 URI에 포함하지 않는다
7. 프로그래밍 언어에 의존적인 확장자를 사용하지 않는다
8. 구현에 의존적인 경로를 사용하지 않는다





















