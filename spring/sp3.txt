JUnit : 자바 언어 위한 단위테스트 프레임워크, 스프링부트에서 test/java 에 테스트 클래스 작성


@SpringBootTest : @SpringBootApplication이 있는 클래스에 포함된 빈으로 테스트용 애플리케이션 컨택스트 생성
@AutoConfigureMockMvc : MockMvc생성해 서버에 배포없이 테스트용 MVC환경 만들어 요청.전송.응답 기능 제공

@BeforeAll : 전체 태스트 시작전 1회 실행
@BeforeEach : 테스트 케이스 시작하기 전마다 실행
@Test : 테스트할 로직
@AfterAll : 전체 테스트 마치고 종료전 1회 실행
@AfterEach : 테스트 케이스 종료하기 전마다 실행

... 테스트코드 작성시 given-when-then 구조로 작성
... given : when 이전 주어질 값
... when : 주어진 값으로 api등을 호출해 실행
... then : 응답코드 확인과 반환값이 예상결과와 일치하는지 확인

 ORM : 자바의 객체와 데이터베이스를 연결하는 프로그래밍 기법, sql문 직접 작성 않고도 사용하는 언어로 데이터베이스 접근가능,
 ... 객체지향적 코드작성으로 비즈니스로직에 집중가능, 데이터베이스 시스템의 추상화로 데이터베이스 전환시 추가작업이 적다,
 ... 매핑정보가 명확해 ERD에 대한 의존도 낮출 수 있다, 복잡한 쿼리는 ORM으로 해결 불가

 애플리케이션 - JPA - 하버네이트 - JDBC - 데이터베이스
 JPA : 자바 객체와 데이터베이스 연결해 데이터 관리, 객체 지향 도메인 모델과 데이터베이스의 다리역할
 하버네이트 : JPA의 인터페이스를 수현, 내부적으로 JDBC API사용

 엔티티 : 데이터베이스의 테이블과 매핑되는 객체
 엔티티매니저 : 엔티티를 관리해 데이터베이스와 애플리케이션 사이에서 객체를 생성.수정.삭제,
 ... 스프링부트는 엔티티매니저 역시 빈의 형태로 하나만 생성해 공유하여 동시성 문제가 발생할 수 있지만 이를 프록시 엔티티 메니저를 사용
 ... 구조 : 어플리케이션으로 요청이 들어온다 -> 엔티티메니저팩토리 -> 엔티티 매니저 -> 커넥션 -> 데이터베이스
영속성 컨텍스트 : 엔티티 매니저는 엔티티를 영속성 컨텍스트에 저장한다, JPA의 특징인 엔티티를 관리하는 가상의 공간
특징 : 1차 캐시로 @Id 에너테이션을 식별자로 사용해 빠른 데이터조회, 트랜잭션 커밋전 쿼리를 묶음으로 처리해 시스템부담감소,
... 1차캐시에 저장된 엔티티값과 현재 엔티티값 비교해 변경사항 감지해서 데이터베이스에 자동반영, 쿼리로 요청한 데이터를 애플리케이션에 바로 로딩
... 하는게 아닌 필요시마다 쿼리를 날려 데이터를 조회
... 데이터베이스의 접근을 최소화해 성능을 향상
엔티티 상태 : 영속성 컨텍스트가 관리하지 않는 분리상태, 관리상태, 관계전혀없는 비영속상태, 삭제된상태 로 나뉜다

ORM : 관계형 데이터베이스와 프로그램 간 통신 개념
JPA : 자바 애플리케이션에서 관계형 데이터베이스 이용하는 방식을 정의한 기술 명세
하버네이트 : JPA의 구현체
스프링 데이터 JPA : JPA를 쓰기 편하게 만든 모듈




























