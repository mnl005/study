스프링은 모든 기능의 기반을 제어의 역전과 의존성 주입에 둔다

제어의 역전(IoC) : 다른 객체를 직접 생성하거나 제어하는게 아닌 외부에서 관리하는 객체를 가져와 사용, 스프링은 스프링
... 컨테이너가 객체를 관리.제공 한다
의존성주입(DI) : 어떤 클래스가 다른 클래스에 의존한다, 예를들어 특정 클래스가 객체를 직접 생성하는게 아닌
... 스프링 컨네이너에 빈으로 등록되어 관리되는 객체를 @Autowired를 통해 건내받는 것이다
스프링 컨테이너 : 빈의 생성과 소멸까지의 생명주기를 관리
빈 : @Component 등으로 클래스를 빈으로 등록하여 스프링 컨테이너가 관리하는 객체, 빈의 이름은 클래스 이름의 첫글자를 소문자로 바꿔서관리
관점지향프로그래밍(AOP) : 프로그레밍에 대한 관심을 핵심관점.부가관점으로 나누어 관심 기준으로 모듈화 하는것
... ex) 은행 프로그램에서의 핵심관점은 계좌이체나 고객관리로직, 부가 관점은 로깅이나 데이터베이스 로직
... 관점 분리로 로직을 모듈화해 프로그램의 변경과 확장에 유연한 대응 가능
이식 가능한 서비스 추상화(PSA) : 스프링에서 제공하는 다양한 기술을 추상화해 개발자가 쉽게 사용하는 인터페이스,
... ex) 데이터베이스 접근 기술인 JPA나 JDBC등 추상화된 인터페이스 통해 일관된 방식으로 데이터 접근이 가능하게 하는 방식

http://localhost:8080/test : localhost는 현재 사용중인 컴퓨터, 8080은 포트번호, test는 경로

@SpringBootApplication : 스프링 부트 사용시 필요한 기본 설정을 해준다
... 하위 구성으로 ...
@SpringBootConfiguration : 스프링 관련 설정
@EnableAutoConfiguration : 스프링부트 자동구성 활성화, spring.factories 파일의 클래스를 자동설정
@ComponentScan : 사용자가 등록한 빈을 읽고 등록, @Component를 가진 클래스 찾아 빈으로 등록
@Configuration : 컴포넌트 스캔대상, 설정파일등록기
@Repository : 컴포넌트 스캔대상, ORM매핑
@Controller.@RestController : 컴포넌트 스캔대상, 라우터
@Service : 컴포넌트 스캔대상, 비즈니스로직

@RestController : @Controller + @ResponseBody
@Controller : @Documented + Component
... 따라서 @RestController은 컴포넌트로서 빈으로 등록되며 나머지 애너테이션도 이와 유사한 구조로 빈으로 등록된다,
... 이름이 다른 이유는 빈의 역할을 명확히 구분하기 위함이다

스프링부트 구조 : 컨트롤러(프레젠테이션계층) - 서비스(비즈니스계층) - 리포지터리(퍼시스턴스계층) - 데이터베이스
... 프레젠테이션 계층 : http요청받아 비즈니스 계층으로 전송
... 비즈니스 계층 : 서비스 구현위한 로직
... 퍼시스턴스 계층 : 모든 데이터베이스 관련 로직, 데이터베이스 계층과 상호작용하는 DAO객체를 사용
... 서로 다른 계층간 통신으로 프로그램이 작동한다
... 클래스 추가시 명확한 계층분리를 통해 클래스의 목적이 뚜렸해야 한다

스프링부트 디렉터리 구조 :
... main : 코드 작성 공간, 프로젝트 실행시 필요한 모든 소스코드와 리소스파일이 포함
... test : 프로젝트 소스 코드를 테스트할 목적가진 코드나 리소스 파일
... build.gradle : 빌드설정파일, 의존성이나 플러그인 설정 등과 같이 필드시 필요한 설정
... settings.gradle : 빌드할 프로젝트의 정보설정
... application.yml : 데이터베이스 연결 등 기타설정

스프링부트 요청-응답 구조 :
브라우저에서 톰캣에 GET 요청 -> 스프링 부트의 디스패처 서블릿이 URL분석해 요청을 처리가능한 컨트롤러 확보 ->
컨트롤러의 해당 요청 받는 메서드에서 이를 비즈니스.퍼시스턴트 계층 통해 필요한 데이터를 가져온다 -> 가져온 데이터 기반으로 응답